type: install
id: sqldb-multiregion
name: DataBase Multiregion Topology

nodes:
  - nodeType: ${settings.stack}
    count: ${settings.count}
    flexibleCloudlets: 16
    nodeGroup: sqldb
    tag: ${settings.tag}
    skipNodeEmails: true
    env:
      SCHEME: ${settings.scheme:slave}
      REPLICA_USER: ${settings.repl_user:repl-test}
      REPLICA_PSWD: ${settings.repl_pswd:abcABC123}

mixins:
  - https://raw.githubusercontent.com/sych74/mysql-cluster/v3.0.0/scripts/common.yml
  - /common.yml

onBeforeClone:
  stopEvent:
    type: warning
    message: Cloning is not supported for multiregion cluster. 

onBeforeMigrate:
  stopEvent:
    type: warning
    message: Migration is not supported for multiregion cluster.

onBeforeRemoveNode[sqldb]:
  stopEvent:
    type: warning
    message: Scaling is not supported for multiregion cluster.

onBeforeAddNode[sqldb]:
  stopEvent:
    type: warning
    message: Scaling is not supported for multiregion cluster.

globals:
  DB_CLUSTER_PATH: https://raw.githubusercontent.com/jelastic-jps/mysql-cluster/v3.0.0
  DB_USER: ${settings.db_user:user-test}
  DB_PASS: ${settings.db_pswd:abcABC123}
  SCHEME: ${settings.scheme:slave}
  slave_conf: /etc/mysql/conf.d/slave.cnf
  master_conf: /etc/mysql/conf.d/master.cnf
  galera_conf: /etc/mysql/conf.d/galera.cnf

onInstall:
  - getReplicaUser
  - getEnvIndex
  - setGlobals:
      index: ${response.index}
  - if (/slave/.test('${globals.SCHEME}')):
    - if (/-db-1/.test('${env.envName}')):
      - api: env.control.SetEnvDisplayName
        displayName: ${env.envName} Primary ${env.hostGroup.displayName}
      - primaryConfiguration: ${globals.index}
    - else: 
      - api: env.control.SetEnvDisplayName
        displayName: ${env.envName} Secondary ${env.hostGroup.displayName}
      - secondaryConfiguration
  - if (/master/.test('${globals.SCHEME}')):
    - if (/-db-1/.test('${env.envName}')) || (/-db-2/.test('${env.envName}')):
      - api: env.control.SetEnvDisplayName
        displayName: ${env.envName} Primary ${env.hostGroup.displayName}
      - primaryConfiguration: ${globals.index}
    - else: 
      - api: env.control.SetEnvDisplayName
        displayName: ${env.envName} Secondary ${env.hostGroup.displayName}
      - secondaryConfiguration
  - if (/galera/.test('${globals.SCHEME}')):
    - api: env.control.SetEnvDisplayName
      displayName: ${env.envName} Galera ${env.hostGroup.displayName}
  - if (/xtradb/.test('${globals.SCHEME}')):
    - api: env.control.SetEnvDisplayName
      displayName: ${env.envName} XtraDB ${env.hostGroup.displayName}
  - setupUsers:
      id: ${nodes.sqldb.master.id}
  - if (!/vpnAppid/.test("${globals.vpnAppid}") && '${settings.internalNetworkEnabled}' == 'true'):
    - install: /vpnNetwork.jps
      nodeGroup: sqldb
      settings:
        vpnAppid: ${globals.vpnAppid}

actions:        
  primaryConfiguration:
    - cmd[sqldb]: |-
        wget ${globals.DB_CLUSTER_PATH}/configs/master.cnf -O ${globals.master_conf} &>> /var/log/run.log;
        sed -i "s/report_host.*/report_host = node${nodes.sqldb.master.id}/" ${globals.master_conf}; 
        sed -i "s/server-id.*/server-id = ${nodes.sqldb.master.id}/" ${globals.master_conf};
        sed -i "s/auto-increment-offset.*/auto-increment-offset = ${this}/" ${globals.master_conf};
        sed -i '/log-slave-updates/d' ${globals.master_conf};

  secondaryConfiguration:
    - cmd[sqldb]: |-
        wget ${globals.DB_CLUSTER_PATH}/configs/slave.cnf -O ${globals.slave_conf} &>> /var/log/run.log;
        sed -i "s/report_host.*/report_host = node${nodes.sqldb.master.id}/" ${globals.slave_conf};
        sed -i "s/server-id.*/server-id = ${nodes.sqldb.master.id}/" ${globals.slave_conf};
        sed -i '/log-slave-updates/d' ${globals.slave_conf};
        sed -i '/read_only.*/d' ${globals.slave_conf};

  galeraConfiguration:
    - cmd[sqldb]: |-
        [ -e /etc/systemd/system/mariadb.service.d ] && wget ${globals.path}/scripts/mariadb-systemd-override.conf -O /etc/systemd/system/mariadb.service.d/bootstrap.conf || wget ${globals.path}/scripts/mysql -O /etc/init.d/mysql;
        chmod +x /usr/local/sbin/setMySQLOOMScore; echo '/etc/systemd/system/mariadb.service.d/bootstrap.conf' >> /etc/jelastic/redeploy.conf; systemctl daemon-reload
      user: root
    - cmd[sqldb]: |-
        wget ${globals.DB_CLUSTER_PATH}/configs/galera.cnf -O ${globals.galera_conf} &>> /var/log/run.log;
        
  xtradbConfiguration:
    - cmd[sqldb]: |-
        [ -e /etc/systemd/system/mariadb.service.d ] && wget ${globals.path}/scripts/mariadb-systemd-override.conf -O /etc/systemd/system/mariadb.service.d/bootstrap.conf || wget ${globals.path}/scripts/mysql -O /etc/init.d/mysql;
        chmod +x /usr/local/sbin/setMySQLOOMScore; echo '/etc/systemd/system/mariadb.service.d/bootstrap.conf' >> /etc/jelastic/redeploy.conf; systemctl daemon-reload
      user: root
    - cmd[sqldb]: |-
        wget ${globals.DB_CLUSTER_PATH}/configs/xtradb.cnf -O ${globals.galera_conf} &>> /var/log/run.log;
