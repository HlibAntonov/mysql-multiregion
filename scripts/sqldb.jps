type: install
id: sqldb-multiregion
name: DataBase Multiregion Topology

nodes:
  - nodeType: mariadb-dockerized
    count: 1
    flexibleCloudlets: 16
    nodeGroup: sqldb
    tag: ${settings.tag}
    skipNodeEmails: true
    env:
      REPLICA_USER: ${settings.repl_user:repl-test}
      REPLICA_PSWD: ${settings.repl_pswd:abcABC123}

mixins:
  - https://raw.githubusercontent.com/jelastic-jps/mysql-cluster/v3.0.0/scripts/common.yml
  - /common.yml

onBeforeClone:
  stopEvent:
    type: warning
    message: Cloning is not supported for multiregion cluster. 

onBeforeMigrate:
  stopEvent:
    type: warning
    message: Migration is not supported for multiregion cluster.

onBeforeRemoveNode[sqldb]:
  stopEvent:
    type: warning
    message: Scaling is not supported for multiregion cluster.

onBeforeAddNode[sqldb]:
  stopEvent:
    type: warning
    message: Scaling is not supported for multiregion cluster.

globals:
  DB_CLUSTER_PATH: https://raw.githubusercontent.com/jelastic-jps/mysql-cluster/v3.0.0
  DB_USER: ${settings.db_user:user-test}
  DB_PASS: ${settings.db_pswd:abcABC123}
  SCHEME: ${settings.scheme:slave}
  vpnAppid: ${settings.vpnAppid}

onInstall:
  - getReplicaUser
  - getEnvIndex
  - setGlobals:
      index: ${response.index}
  - if ('${globals.SCHEME}' == 'slave'):
    - if (${globals.index} == 1):
      - api: env.control.SetEnvDisplayName
        displayName: ${env.envName} Primary-${globals.index} ${env.hostGroup.displayName}
      - primaryConfiguration: ${globals.index}  
  - if ('${globals.SCHEME}' == 'master'): 
    - if (${globals.index} == 1) || (${globals.index} == 2):
      - api: env.control.SetEnvDisplayName
        displayName: ${env.envName} Primary-${globals.index} ${env.hostGroup.displayName}
      - primaryConfiguration: ${globals.index}
  - else: 
    - api: env.control.SetEnvDisplayName
      displayName: ${env.envName} Secondary ${env.hostGroup.displayName}
    - secondaryConfiguration
  - setupUsers:
      id: ${nodes.sqldb.master.id}
  - if (!/vpnAppid/.test("${globals.vpnAppid}") && '${settings.internalNetworkEnabled}' == 'true'):
    - install: /vpnNetwork.jps
      nodeGroup: sqldb
      settings:
        vpnAppid: ${globals.vpnAppid}

actions:        
  primaryConfiguration:
    - cmd[${nodes.sqldb.master.id}]: |-
        wget ${globals.DB_CLUSTER_PATH}/configs/master.cnf -O /etc/mysql/conf.d/master.cnf &>> /var/log/run.log;
        sed -i "s/report_host.*/report_host = node${nodes.sqldb.master.id}/" /etc/mysql/conf.d/master.cnf; 
        sed -i "s/server-id.*/server-id = ${nodes.sqldb.master.id}/" /etc/mysql/conf.d/master.cnf;
        sed -i "s/auto-increment-offset.*/auto-increment-offset = ${this}/" /etc/mysql/conf.d/master.cnf;
        sed -i '/log-slave-updates/d' /etc/mysql/conf.d/master.cnf;

  secondaryConfiguration:
    - cmd[${nodes.sqldb.master.id}]: |-
        wget ${globals.DB_CLUSTER_PATH}/configs/slave.cnf -O /etc/mysql/conf.d/slave.cnf &>> /var/log/run.log;
        sed -i "s/report_host.*/report_host = node${nodes.sqldb.master.id}/" /etc/mysql/conf.d/slave.cnf;
        sed -i "s/server-id.*/server-id = ${nodes.sqldb.master.id}/" /etc/mysql/conf.d/slave.cnf;
        sed -i '/log-slave-updates/d' /etc/mysql/conf.d/slave.cnf;
        sed -i '/read_only.*/d' /etc/mysql/conf.d/slave.cnf;
