type: update
id: proxysql-multiregion-logic
name: ProxySQL MultiRegion Logic

baseUrl: https://raw.githubusercontent.com/sych74/mysql-multiregion/master

mixins:
  - /scripts/common.yml

globals:
  db_user: ${settings.db_user:user-[fn.random]}
  db_pswd: ${settings.db_pswd:[fn.password(20)]}
  replica_user: ${settings.replica_user:repl-[fn.random]}
  replica_pswd: ${settings.replica_pswd:[fn.password(20)]}
  scheme: ${settings.scheme:galera}

onInstall:
  - getClusterEnvs

actions:

  getClusterEnvs:
    - script: ${baseUrl}/scripts/getClusterEnvs.js
      envName: ${globals.envName}-db-1
    - setGlobals:
        DBEnvs: ${response.items.join(,)}
    - script: ${baseUrl}/scripts/getClusterEnvs.js
      envName: ${settings.envName}-lb-1
    - setGlobals:
        ProxyEnvs: ${response.items.join(,)}

  setupCluster:
    script: |
      var DBEnvs = '${globals.DBEnvs}'.split(','), actions = [], galera_nodes_array = "";
      for (var i = 0, n = DBEnvs.length; i < n; i ++) {
        var resp = jelastic.env.control.GetEnvInfo(DBEnvs[i], session);
        if (resp.result != 0) return resp;
        for (var l = 0, k = resp.nodes; l < k.length; l++) {
          if (k[l].nodeGroup == 'sqldb') {
            galera_nodes_array += k[l].address + ",";
          }
        }
      }
      galera_nodes_array = galera_nodes_array.slice(0, -1);
      for (var i = 0, n = DBEnvs.length; i < n; i ++) {
        actions.push({
          jps: "${baseUrl}/scripts/proxysql-configuration.jps?_r=${fn.random}",
          envName: DBEnvs[i],
          settings: {
            db_user: "${globals.db_user}",
            db_pswd: "${globals.db_pswd}",
            replica_user: "${globals.replica_user}",
            replica_pswd: "${globals.replica_pswd}",
            scheme: "${globals.scheme}",
            galera_nodes_array: galera_nodes_array,
            galera_server_id: "${globals.galera_server_id}",
            galera_segment_id: i,
            galera_cluster_name: "${globals.galera_cluster_name}"
          }
        })
      }
      return { result: 0, onAfterReturn: { 'marketplace.jps.install': actions } };
