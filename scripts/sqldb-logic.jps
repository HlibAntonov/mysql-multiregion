type: update
id: sqldb-multiregion-logic
name: DataBase MultiRegion Logic

baseUrl: https://raw.githubusercontent.com/sych74/mysql-multiregion/master

mixins:
  - https://raw.githubusercontent.com/sych74/mysql-cluster/v3.0.0/scripts/common.yml
  - /scripts/common.yml

globals:
  DB_USER: ${settings.db_user:user-[fn.random]}
  DB_PASS: ${settings.db_pswd:[fn.password(20)]}
  REPLICA_USER: ${settings.replica_user:repl-[fn.random]}
  REPLICA_PSWD: ${settings.replica_pswd:[fn.password(20)]}
  scheme: ${settings.scheme:galera}
  galera_server_id: ${settings.galera_server_id:[fn.random]}
  galera_segment_id: ${settings.galera_segment_id:1}
  galera_cluster_name: ${settings.galera_cluster_name:galera-cluster-[fn.random]}

onInstall:
  - getClusterEnvs
  - setupCluster
  - if (/slave/.test('${globals.scheme}')): startSlave
  - if (/master/.test('${globals.scheme}')): startMaster
  - if (/galera/.test('${globals.scheme}')): startGalera
  - if (/xtradb/.test('${globals.scheme}')): startXtradb

actions:

  startGalera:
    script: |
      var DBEnvs = '${globals.DBEnvs}'.split(','), api = [];
      var stopServiceCmd = "sudo jem service stop";
      var startServiceCmd = "sudo jem service start";
      var enableBootstrapCmd = "echo 'safe_to_bootstrap: 1' > /var/lib/mysql/grastate.dat";
      var disableBootstrapCmd = "echo 'safe_to_bootstrap: 0' > /var/lib/mysql/grastate.dat";
      var resp = jelastic.env.control.GetEnvInfo(DBEnvs[0], session);
      if (resp.result != 0) return resp;
      for (var i = 0, n = resp.nodes; i < n.length; i++) {
        if (n[i].nodeGroup == 'sqldb') {
          if (n[i].ismaster) {
            api.push({
              method: "env.control.ExecCmdById",
                envName: DBEnvs[0],
                nodeId: n[i].id,
                commandList: [ {"command": stopServiceCmd},{"command": enableBootstrapCmd}, {"command": startServiceCmd}]
            });
          } else {
            api.push({
              method: "env.control.ExecCmdById",
                envName: DBEnvs[0],
                nodeId: n[i].id,
                commandList: [ {"command": stopServiceCmd},{"command": disableBootstrapCmd}, {"command": startServiceCmd}]
            });
          }
        }
      }
      for (var i = 1, n = DBEnvs.length; i < n; i ++) {
        api.push({
          method: "env.control.ExecCmdByGroup",
            envName: DBEnvs[i],
            nodeGroup: "sqldb",
            commandList: [ {"command": stopServiceCmd},{"command": disableBootstrapCmd}, {"command": startServiceCmd}]
          });
      }
      return { result: 0, onAfterReturn: { api: api, async: true } }

  getClusterEnvs:
    - script: ${baseUrl}/scripts/getClusterEnvs.js
      envName: ${env.envName}
    - setGlobals:
        DBEnvs: ${response.items.join(,)}    

  setupCluster:
    script: |
      var DBEnvs = '${globals.DBEnvs}'.split(','), actions = [], galera_nodes_array = "";
      for (var i = 0, n = DBEnvs.length; i < n; i ++) {
        var resp = jelastic.env.control.GetEnvInfo(DBEnvs[i], session);
        if (resp.result != 0) return resp;
        for (var l = 0, k = resp.nodes; l < k.length; l++) {
          if (k[l].nodeGroup == 'sqldb') {
            galera_nodes_array += k[l].address + ",";
          }
        }
      }
      galera_nodes_array = galera_nodes_array.slice(0, -1);
      for (var i = 0, n = DBEnvs.length; i < n; i ++) {
        actions.push({
          jps: "${baseUrl}/scripts/sqldb-configuration.jps?_r=${fn.random}",
          envName: DBEnvs[i],
          settings: {
            DB_USER: "${globals.DB_USER}",
            DB_PASS: "${globals.DB_PASS}",
            REPLICA_USER: "${globals.REPLICA_USER}",
            REPLICA_PSWD: "${globals.REPLICA_PSWD}",
            scheme: "${globals.scheme}",
            galera_nodes_array: galera_nodes_array,
            galera_server_id: "${globals.galera_server_id}",
            galera_segment_id: i,
            galera_cluster_name: "${globals.galera_cluster_name}"
          }
        })
      }
      return { result: 0, onAfterReturn: { install: actions } };
